@page "/randomcomicsviewer"

@using ComicsAppWasm.ComicsService.XKCD
@using ComicsAppWasm.ComicsService.CalvinAndHobbes
@using ComicsAppWasm.ComicsService.Dilbert
@using ComicsAppWasm.ComicsService.Garfield

@using Radzen

@inject IXKCDService service

<h5>Click to see random comic strip</h5>

<br />

<div class="container">
    <div style="text-align: center;">
        <RadzenButton Click="@GetPreviousComic" ButtonStyle="ButtonStyle.Secondary" Icon="chevron_left" Text="  " />
        <RadzenButton Click="@GetNextComic" ButtonStyle="ButtonStyle.Secondary" Icon="chevron_right" Text="  " />
    </div>
    <br />
    <div style="text-align: center;">
        <SpinLoader IsLoading="_isLoading">
            <LoadingTemplate>
                <div class="col-12" style="background-color: transparent; vertical-align: middle"></div>
                <br />
                <br />
                <Swing Center="true" Size="100px"></Swing>
            </LoadingTemplate>
            <ContentTemplate>
                <picture>
                    <img src="@_fileResult" class="img-thumbnail" alt="Comic Loading...">
                </picture>
            </ContentTemplate>
        </SpinLoader>
    </div>
</div>

@code {

    private bool _isLoading = false;

    private string _fileResult = "images/comics.jpg";

    private IList<string>? _imageList;

    private int _currentIndex;

    protected override void OnInitialized()
    {
        _imageList = new List<string>
        {
            "images/comics.jpg"
        };
    }

    private async Task GetRandomComic()
    {
        _isLoading = true;

        ComicEnum comicName = ChooseRandomComicSource();

        _fileResult = comicName switch
        {
            ComicEnum.Garfield => await GarfieldService.GetComicUri(),
            ComicEnum.Xkcd => await service.GetComicUri(),
            ComicEnum.Dilbert => await DilbertService.GetComicUri(),
            ComicEnum.CalvinAndHobbes => await CalvinAndHobbesService.GetComicUri(),
            _ => throw new ArgumentOutOfRangeException()
        };        

        _imageList.Add(_fileResult);
        _isLoading = false;
    }

    private void GetPreviousComic()
    {
        _currentIndex = _imageList.IndexOf(_fileResult);

        if (_currentIndex > 0)
        {
            _fileResult = _imageList[_currentIndex - 1];
        }
    }

    private async Task GetNextComic()
    {
        _currentIndex = _imageList.IndexOf(_fileResult);

        int listCount = _imageList.Count;

        if (_currentIndex == listCount - 1)
        {
            await this.GetRandomComic();
        }

        if (_currentIndex < listCount - 1)
        {
            _fileResult = _imageList[_currentIndex + 1];
        }
    }

    private static ComicEnum ChooseRandomComicSource()
    {
        var random = new Random();
        return (ComicEnum)random.Next(Enum.GetNames(typeof(ComicEnum)).Length);
    }
}
